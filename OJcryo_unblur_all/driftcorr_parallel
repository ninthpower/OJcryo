#!/bin/bash

# v0.11 by Austin Dixon - Rockefeller University
# This program runs unblur on .tif files in parallel in batch mode as opposed to on a single core.
# It is dependent on: tif2mrc, clip, binvol, and unblur (v 1.0.2).

##### HELP/USAGE #####
display_usage() {
  printf "*********************************
Usage:\ndriftcorr_parallel <gainref> <cores> <ImgsPerStack> <A/pix> <DoseFilter?> <ExpsrPerFrm> <kV> <Pre-ExpsrAmount> <SaveAlignedFrames?> <ExpertOptions?>\n"
  printf "\nEXAMPLE: driftcorr_parallel GR216_vf_cw90.mrc 8 30 1.2 YES 1.25 200 0 NO NO\n*********************************\n"
}

# check whether user supplied help tag
if [[ ($1 == "--help") ||  ($1 == "-h") ||  ($1 == "--h") || ($1 == "-help") ]]
then
    	display_usage
        exit 0
fi

# check for argument count
if [ $# -lt 10 ]
then
	printf "\nYou supplied $# arguments, need 10!\n"
	display_usage
	exit 1
fi

# check using more than one core
if [[ ($2 == "1") ]]
then
	printf "Must give more than 1 core. (Second Argument)\n"
	exit 1
fi


############## MAIN SCRIPT ##############
# set-up variables for parallelization
GAIN_REF=$1					# first parameter is the gain reference for unblur to use
NUM_CORES=$2					# (c) second parameter is number of cores to use

# vars and calculations for parallelization
# you can find an explanation of what I'm doing here: https://math.stackexchange.com/questions/2663633/what-is-the-actual-name-of-this-binning-efficiency-algorithm-i-made-up
LIST_FILES=(*.tif)					# get an array of .tiff files in this directory
NUM_FILES=${#LIST_FILES[@]}			# (f) get number of .tiffs in this directory
q_FILES=$((NUM_FILES / NUM_CORES))		# (q) number of files in each c_q core
c_r_CORES=$((NUM_FILES % NUM_CORES))		# (c_r) number of remaining cores with p_r processes each
c_q_CORES=$((NUM_CORES - c_r_CORES))		# (c_q) number of cores with q processes each
r_FILES=$(( (NUM_FILES - (c_q_CORES * q_FILES)) / c_r_CORES ))	# (f_r) number of files in each c_r_CORES
TOTAL_Q_FILES=$((c_q_CORES * q_FILES))
TOTAL_R_FILES=$((NUM_FILES - TOTAL_Q_FILES))
p=0		# iterator

: '
# DEBUGGING
printf "gain=$GAIN_REF
cores=$NUM_CORES
list of files=$LIST_FILES
num files=$NUM_FILES
q files=$q_FILES
r files=$r_FILES
c_r cores=$c_r_CORES
c_q cores=$c_q_CORES\n"
'

# make these directories if not made already
mkdir -p driftcorr_mrc
mkdir -p Finished_tif


#############-------- Parallel When files < cores --------#############
# IF number of files < number of cores -> just fill in one file for each core until done
if ((NUM_FILES < NUM_CORES));
then
	# Show what we're doing...
	echo "**************************************************************************"
	echo "Executing tif2mrc -> clip -> binvol -> unblur on $NUM_FILES files on $((NUM_CORES-NUM_FILES+1)) cores."
	echo "**************************************************************************"

	for ((i=0; i<NUM_FILES; i++)); do
	  /rugpfs/fs0/odonnell_lab/scratch/adixon/Other_Scripts/driftcorr_parallel_project/driftcorr_info_and_scripts "$GAIN_REF" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" "${LIST_FILES[i]}" &
	done


#############-------- Parallel Binning Algorithm (files > cores) --------############
else
	# show the user what we're doing
	echo "**************************************************************************"
	echo "Executing tif2mrc -> clip -> binvol -> unblur on $NUM_FILES files on $NUM_CORES cores."
	echo "**************************************************************************"

	# fill in c_q_CORES with q_FILES each
	for ((i=0; i<c_q_CORES; i++)); do
	  /rugpfs/fs0/odonnell_lab/scratch/adixon/Other_Scripts/driftcorr_parallel_project/driftcorr_info_and_scripts "$GAIN_REF" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" "${LIST_FILES[@]:p:q_FILES}" &
	  p=$((p + q_FILES))			# increment p by the number of files in this chunk

	done

	# fill in remaining c_r_CORES with r_FILES each
	for ((i=0; i<c_r_CORES; i++)); do
	  /rugpfs/fs0/odonnell_lab/scratch/adixon/Other_Scripts/driftcorr_parallel_project/driftcorr_info_and_scripts "$GAIN_REF" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" "${LIST_FILES[@]:p:r_FILES}" &
	  p=$((p +r_FILES))
	done
fi

#### Show spinner so user knows it's still working... ####
PID=$!
i=1
sp="/-\|"
echo -n ' '
while [ -d /proc/$PID ]
do
  printf "\b${sp:i++%${#sp}:1}"
done

wait			# wait till all subprocesses are done
echo "FINISHED!"
exit 1

